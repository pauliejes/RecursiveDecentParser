/*
  Calculator.cpp - A simple arithmetic interpreter.
  Name: R. Shore
  Class: CSC-4510

  The program demonstrates two main components of
  an interpreter/compiler.
  1) A lexical analyzer to scan the input for
     LETTERs, DIGITs, or OPERATORs

     An IDENT consist of a LETTER followed by
     a LETTER or DIGIT (max 99 characters)

     AN INT_LIT consists of a sequence of DIGITs
     (max 99 digits).

     An OPERATOR =, +, -, *, /, (, )
     lexeme[] holds the item read from source
     nextToken holds the type

  2) A recursive descent parser
     The Grammar - EBNF description

     <expr> → <term> {(+ | -) <term>}
     <term> → <factor> {(* | /) <factor>}
     <factor> → id | int_constant | ( <expr>  )

     NOTE: the recusive descent starts at <expr>
 */

#include<iostream>
#include<stdio.h>
#include"general.h"
#include"lex.h"
#include"topDownParser.h"
#include"symTable.h"



using namespace std;


/******************************************************/
/* main driver */
int main(void) {
   /* Open the input data file and process its contents */
   // if ((in_fp = fopen("front.in", "r")) == NULL)
   //    printf("ERROR - cannot open front.in \n");
   // else {
  getChar();
  do {
    lex();
    expr();
  } while (nextToken != EOF);

   //}
}


/* expr
   Parses strings in the language generated by the rule:
   <expr> -> <term> {(+ | -) <term>}
 */
void expr()
{
   printf("Enter <expr>\n");

   /* Parse the first term */
   term();

   /* As long as the next token is + or -, get
      the next token and parse the next term */
   while (nextToken == ADD_OP || nextToken == SUB_OP) {
      lex();
      term();
   }
   printf("Exit <expr>\n");

} /* End of function expr */


/* term
 *  Parses strings in the language generated by the rule:
 *  <term> -> <factor> {(* | /) <factor>)
 */
void term()
{
   printf("Enter <term>\n");
   /* Parse the first factor */
   if (nextToken == SUB_OP) {
      lex();
      factor();
   } else {
      factor();
   }
   /* As long as the next token is * or /, get the
      next token and parse the next factor */
   while (nextToken == MULT_OP || nextToken == DIV_OP) {
      lex();
      factor();
   }
   printf("Exit <term>\n");

} /* End of function term */


void mod()
{
   printf("Enter <term>\n");
   /* Parse the first factor */
   factor();
   /* As long as the next token is * or /, get the
      next token and parse the next factor */
   while (nextToken == MOD_OP) {
      lex();
      factor();
   }
   printf("Exit <term>\n");

} /* End of function term */


// void minus()
// {
//    printf("Enter <term>\n");
//     //As long as the next token is -, get the
//     //  next token and parse the next factor 
   // while (nextToken == SUB_OP) {
   //    lex();
   //    factor();
   // }
//    printf("Exit <term>\n");
// }


void exponent()
{
   printf("Enter <factor>\n");
   /* Parse the first factor */
   factor();
   /* As long as the next token is * or /, get the
      next token and parse the next factor */
   while (nextToken == POW_OP) {
      lex();
      factor();
   }
   printf("Exit <factor>\n");


} /* End of function term */


/* factor
 * Parses strings in the language generated by the rule:
 *
 *   <factor> -> id | int_constant | ( <expr  )
 *
 */
void factor()
{
   printf("Enter <factor>\n");
   /* Determine which RHS */
   if (nextToken == IDENT || nextToken == INT_LIT){
      /* Get the next token d*/
      lex();

   /* If the RHS is ( <expr> ), call lex to pass over the left
      parenthesis, call expr and check for the right parenthesis */
   } else if (nextToken == LEFT_PAREN) {
         lex();
         expr();
         if (nextToken == RIGHT_PAREN)
            lex();
         else
            error("Right without left paren");
   } else {
   /* It was not an id, an integer literal, or a left
       parenthesis */
       error("expected an id, integer, or a left paren");
   } /* End of else */
   printf("Exit <factor>\n");;
}/* End of function factor */

void error(const char *message)
{
   printf("Error: %s\n",message);
}
